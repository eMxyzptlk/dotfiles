#! /usr/bin/env bash

set -euo pipefail

echoErr() { >&2 echo -e "\e[1;31m[ERR] ${*}\e[0m" ; }
echoWarn() { >&2 echo -e "\e[1;33m[WARN] ${*}\e[0m" ; }
echoInfo() { >&2 echo -e "\e[1;34m[INFO] ${*}\e[0m" ; }
echoSuccess() { >&2 echo -e "\e[1;32m[SUCCESS] ${*}\e[0m" ; }
containsElement() {
  declare -r to_find="${1}"; shift 1
  for element in "${@}"; do [[ "${element}" == "${to_find}" ]] && return 0; done
  return 1
}

echoUsage() {
  >&2 echo "Usage: TODO"
}

setShabkaPath() {
  desc="Set the global readonly shabka_path variable to point to the path where
        shabka is stored."

  # TODO: always get the shabka path from a default location/channel
  declare -g -r shabka_path="$(cd $(dirname "${BASH_SOURCE[0]}")/../ && pwd)"
}

setDotshabkaPath() {
  desc="Set the global readonly dotshabka_path variable to point to the path
        where dotshabka is stored."

  # TODO: change this to be the default path of .shabka
  if [[ -z "${DOTSHABKA_PATH:-}" ]]; then
    echoErr "DOTSHABKA_PATH variable is required."
    exit 1
  fi

  declare -g -r dotshabka_path="${DOTSHABKA_PATH}"

  if ! [[ -d "${dotshabka_path}" ]]; then
    echoErr "DOTSHABKA_PATH: ${dotshabka_path}: No such directory."
    exit 1
  fi
}

getHostRelease() {
  desc="Get the release of a host, defaults to shabka's release.
        Usage: getHostRelease <host>
        Requires shabka_path and dotshabka_path to be set."

  declare -r host="${1}"
  shift 1

  if [[ -r "${dotshabka_path}/hosts/${host}/release" ]]; then
    declare -r host_release="$( cat "${dotshabka_path}/hosts/${host}/release" )"
  else
    # fallback to shabka's default release
    declare -r host_release="$( tr -d "\n" < "${shabka_path}/release" )"
  fi

  echo "${host_release}"
}

getHostUname() {
  desc="Get the uname of a host.
        Usage: getHostUname <host>
        Requires dotshabka_path to be set."

  declare -r host="${1}"
  shift 1

  if [[ -r "${dotshabka_path}/hosts/${host}/uname" ]]; then
    declare -g -r host_uname="$( cat "${dotshabka_path}/hosts/${host}/uname" )"
  else
    echoErr "Required file does not exist: ${dotshabka_path}/hosts/${host}/uname"
    exit 1
  fi

  case "${host_uname}" in
    "Darwin"|"NixOS")
      echo "${host_uname}"
      ;;
    "Linux")
      echoErr "Linux non-NixOS hosts not supported yet."
      exit 1
      ;;
    *)
      echoErr "Invalid value ${host_uname} at
               ${dotshabka_path}/hosts/${host}/uname"
      exit 1
      ;;
  esac
}

getNixPath() {
  desc="Compute the NIX_PATH from release and uname.
        Usage: getNixPath <release> <uname>
        Requires shabka_path to be set."

  declare -r release="${1}"
  declare -r uname="${2}"
  shift 2

  declare -r nixpkgs="$( nix-build --no-out-link "${shabka_path}" \
                         -A "external.nixpkgs.release-${release/./-}.path" )"
  declare nix_path="nixpkgs=${nixpkgs}:shabka=${shabka_path}"

  if [[ -z "${uname:-}" ]] || [[ "${uname}" == "Darwin" ]]; then
    declare -r nix_darwin="$( nix-build --no-out-link "${shabka_path}" \
                              -A "external.nix-darwin.path" )"
    declare nix_path="darwin=${nix_darwin}:${NIX_PATH}"
  fi

  echo "${nix_path}"
}

getConfigPath() {
  desc="Get the configuration.nix path for a host.
        Usage: getConfigPath <host>
        Requires dotshabka_path to be set."

  declare -r host="${1}"
  shift 1

  declare -r config_path="${dotshabka_path}/hosts/${host}/configuration.nix"
  if ! [[ -r "${config_path}" ]]; then
    echoErr "Configuration ${config_path} does not exist."
    exit 1
  fi

  echo "${config_path}"
}

buildHost() {
  desc="Build a host.
        Usage: buildHost <host> <release> [nix-build arguments and options]
        Requires shabka_path and dotshabka_path to be set."

  declare -r host="${1}"
  declare release="${2}"
  shift 2

  if [[ -z "${release:-}" ]]; then
    declare -r release="$( getHostRelease "${host}" )"
  else
    declare -r release="${release}"
  fi

  declare -r uname="$( getHostUname "${host}" )"

  export NIX_PATH="$( getNixPath "${release}" "${uname}" )"

  echoInfo "nix-build --option builders '' \"${dotshabka_path}/hosts/${host}\" -A system \"${@}\""
  RELEASE="release-${release/./-}" nix-build --option builders '' "${dotshabka_path}/hosts/${host}" -A system "${@}"
}

rebuildHost() {
  desc="Rebuild a host.
        Usage: rebuildHost <command> <host> <release> [nixos-build arguments and options]
        Requires shabka_path and dotshabka_path to be set."

  declare -r cmd="${1}"
  declare -r host="${2}"
  declare release="${3}"
  shift 3

  if [[ -z "${release:-}" ]]; then
    declare -r release="$( getHostRelease "${host}" )"
  else
    declare -r release="${release}"
  fi

  declare -r uname="$( getHostUname "${host}" )"

  export NIX_PATH="$( getNixPath "${release}" "${uname}" )"

  case "${uname}" in
    "NixOS")
      setNixosConfigPath
      RELEASE="release-${release/./-}" nixos-rebuild -I "nixos-config=$( getConfigPath "${host}" )" "${command}" "${@}"
      ;;
    "Darwin")
      setDarwinConfigPath
      RELEASE="release-${release/./-}" darwin-rebuild -I "darwin-config=$( getConfigPath "${host}" )" "${command}" "${@}"
      ;;
    # For future use
    "Linux")
      ;;
  esac
}

pushHostToCachix() {
  desc="Push host to Cachix binary cache.
        Usage: pushHostToCachix <binary-cache-name> <release> <host>
        Requires shabka_path, dotshabka_path and CACHIX_SIGNING_KEY to be set."

  declare -r binary_cache_name="${1}"
  declare release="${2}"
  declare -r host="${3}"
  shift 3

  declare -r current_uname="$(uname -s | tr -d '\n')"
  declare -r uname="$( getHostUname "${host}" )"

  echoInfo "current_uname: ${current_uname}"
  echoInfo "uname: ${uname}"

  if [[ "${current_uname}" == "Linux" ]] && [[ "${uname}" == "Darwin" ]]; then
    echoWarn "The host ${host} of type ${uname} cannot be built on ${current_uname}"
    return
  elif [[ "${current_uname}" == "Darwin" ]] && ([[ "${uname}" == "Nixos" ]] || [[ "${uname}" == "Linux" ]]); then
    echoWarn "The host ${host} of type ${uname} cannot be built on ${current_uname}"
    return
  fi

  buildHost "${host}" "${release}" | cachix push "${binary_cache_name}"
}

pushToCachix() {
  desc="Push host(s) to Cachix binary cache.
        Usage: pushToCachix <binary-cache-name> <release> [host1] [host2] [...]
        Requires shabka_path, dotshabka_path and CACHIX_SIGNING_KEY to be set."

  declare -r binary_cache_name="${1}"
  declare -r release="${2}"
  shift 2

  # check that cachix CLI tool is installed
  if ! command -v cachix >/dev/null 2>&1; then
    echoErr "Cachix CLI tool is required to push to Cachix!"
    exit 1
  fi

  # I don't want to ever make the mistake of pushing while my private files are
  # accessible. This is meant to go away eventually, see #216 for more
  # information
  if [[ -e "${dotshabka_path}/secrets" ]]; then
    echoErr "${dotshabka_path}/secrets exists. Will not continue!"
    exit 1
  fi

  if [[ -z "${CACHIX_SIGNING_KEY:-}" ]]; then
    echoErr "Please set the environment variable CACHIX_SIGNING_KEY before calling the script."
    exit 1
  fi

  if [[ "${#}" -ne 0 ]]; then
    while [[ "${#}" -ne 0 ]]; do
      declare host="${1}"
      shift
      pushHostToCachix "${binary_cache_name}" "${release}" "${host}"
    done
    return
  fi

  for hostPath in "${dotshabka_path}"/hosts/*; do
    pushHostToCachix "${binary_cache_name}" "${release}" "$( basename "${hostPath}" )"
  done
}

main() {
  if [[ "$#" -eq 0 ]]; then
    echoUsage
    exit 1
  fi

  declare host="$( hostname -s )"
  declare release=

  while getopts ":h:r:" opt; do
      case "${opt}" in
        h)
          declare host="${OPTARG}"
          ;;
        r)
          declare release="${OPTARG}"
          ;;
        :)
          echoErr "Invalid option: $OPTARG requires an argument"
          echoUsage
          exit 1
          ;;
        \?)
          # end of possible arguments, rest are for the command
          break
          ;;
      esac
  done
  shift $((OPTIND -1))

  declare -r host="${host}"
  declare -r release="${release}"

  if [[ "${#}" -eq 0 ]]; then
    echoErr "No command specified"
    echoUsage
    exit 1
  fi

  declare -r command="${1}"
  shift 1

  setShabkaPath
  setDotshabkaPath

  case "${command}" in
    "help")
      echoUsage
      exit 0
      ;;
    "build")
      buildHost "${host}" "${release}" "${@}"
    ;;
    "switch"|"boot"|"test"|"dry-build"|"dry-activate"|"activate"|"check")
      rebuildHost "${command}" "${host}" "${release}" "${@}"
      ;;
    "push-to-cachix")
      if [[ "${#}" -eq 0 ]]; then
        echoErr "Cachix binary cache name missing."
        echoUsage
        exit 1
      fi
      declare -r binary_cache_name="${1}"
      shift 1

      pushToCachix "${binary_cache_name}" "${release}" "${@}"
      ;;
    *)
      echoErr "Unkown command:Â ${command}"
      echoUsage
      exit 1
      ;;
  esac
}

[[ "$0" == "$BASH_SOURCE" ]] && main "$@" || true
