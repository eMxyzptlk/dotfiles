#!/usr/bin/env bash
#
# vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
# Copyright (c) 2014-2017 Wael Nasreddine <wael.nasreddine@gmail.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

####
# Bootstrap{{{
bootstrap="$(dirname "${0}")/.bootstrap"
if [ -f "${bootstrap}" ]; then
    # shellcheck source=/dev/null
    source "${bootstrap}"
else
    echo "Cannot bootstrap"
    exit 54
fi
unset bootstrap
#}}}
####

####
# Functions{{{

# setup the initial pssh to use current SSH_AGENT_NAME or ACTIVE_PROFILE
function pssh() {
  export SSH_AGENT_NAME="${SSH_AGENT_NAME:-${ACTIVE_PROFILE}}"
}

# start the SSH agent
function start_ssh_agent() {
  # No. Try to get the environment variables from the file.
  if [[ -f "${SSH_AGENT_FILE}" ]] ; then
    eval "$( grep -v echo "${SSH_AGENT_FILE}" )"
  fi

  # Exit status of ssh-add
  #   0 means the agent exists and has keys,
  #   1 means the agent exists but has no keys, and
  #   2 means agent does not exist.
  ssh-add -l > /dev/null 2>&1
  agent_status=$?

  # Does our environment point to an agent now?
  if [[ "${agent_status}" -eq 2 ]]; then
    # No.  Start an ssh-agent, saving the environment variables.
    if ! ssh-agent -s > "${SSH_AGENT_FILE}"; then
      echo "Failed to start the ssh-agent." >&2
      return
    fi
    eval "$( grep -v echo "${SSH_AGENT_FILE}" )"
  fi

  # Add all of the keys
  for key in $(find "${HOME}/.ssh/${SSH_AGENT_NAME}/" -not -name '*.pub' -not -name agent -type f | sed -e 's://:/:g'); do
    ssh-add "${key}" < /dev/null > /dev/null 2>&1
  done
}

# export the variables to the environment
function export_env() {
  # Print commands to setup environment.  This handles tcsh and
  # assumes everyone else can understand sh syntax (bash, ksh, zsh
  # and maybe others).  Other folks can add detection for more
  # esoteric shells as needed.

  for var in "${@}" ; do
    if [[ -n "${!var}" ]] ; then
      if [ "${USER_SHELL##*/}" = "tcsh" ] ; then
        echo "setenv $var ${!var};"
      elif [ "${USER_SHELL##*/}" = "fish" ] ; then
        echo "set -Ux $var ${!var};"
      else
        echo "$var=${!var}; export $var;"
      fi
    fi
  done
}

#}}}
####

####
# Main{{{

# Forget any currently running agent
unset SSH_AUTH_SOCK SSH_AGENT_PID

# The shell to which we tailor export/setent statements.
USER_SHELL=$1

# Source the active profile so it overloads the pssh
if [[ -n "${ACTIVE_PROFILE}" ]] && [[ -r "${HOME}/.zsh/profiles/${ACTIVE_PROFILE}.zsh" ]]; then
  # shellcheck disable=SC1090
  source "${HOME}/.zsh/profiles/${ACTIVE_PROFILE}.zsh"
fi

# call pssh to setup SSH_AGENT_NAME. This is defined above but can be
# overloaded in the profile sourced above.
pssh

# no SSH_AGENT_NAME? exit
if [[ -z "${SSH_AGENT_NAME}" ]]; then
  exit # do not spawn an agent if we do not know the agent's name
fi

# Path where we store the ssh-agent environment variables, so that
# multiple sessions may look for an existing agent.
SSH_AGENT_FILE="${HOME}/.ssh/${SSH_AGENT_NAME}/agent"
if [[ ! -w "$( dirname "${SSH_AGENT_FILE}" )" ]]; then
  exit # do not spawn an agent if we cannot write to $HOME.
fi

# start the SSH agent (noop if it's already started)
start_ssh_agent

# export the variables required to access the SSH agent
export_env SSH_AUTH_SOCK SSH_AGENT_PID

#}}}
####
