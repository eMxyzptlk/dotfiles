#!/usr/bin/env bash
#
#   vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   $Id: loadcron 1237 2008-07-09 09:16:03Z wael $
#
#   Construct a crontab based on files in ~/.cron and load it into cron.
#   The file ~/.cron/username/fqdn is appended to the common file in the same
#   directory. Note that the common file may have "$HOME" in it, as in
#   "PATH=$HOME/bin". cron is too dumb to deal with that, so the expansion is
#   handled by this script.
#
#   Copyright (c) 2007 Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 tmple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

set -e

# Bootstrap{{{
bootstrap="$(dirname "$0")/.bootstrap"
if [ -f "${bootstrap}" ]; then
    source "${bootstrap}"
else
    echo "Cannot bootstrap"
    exit 54
fi
unset bootstrap
#}}}
# Options#{{{
Args=(${@})
Force=false
CronUser="${USER}"
UserHome="${HOME}"
while [ "${#}" -gt 0 ]; do
    case "${1}" in
        "-f")
            Force=true
            shift
            ;;
        "-u")
            CronUser="${2}"
            UserHome="$(grep "^${CronUser}" /etc/passwd | cut -d':' -f6)"
            shift 2
            ;;
        *)
            ;;
    esac
done
#}}}
# We only need root privilidges if we have specified a user!#{{{
if [ "${CronUser}" != "${USER}" ]; then
    need_root ${Args[@]}
    CronOptions="-u ${CronUser}"
else
    CronOptions=""
fi
#}}}
# Defining variables#{{{
WARNING="# Automatically generated by loadcron; edit ~/.cron/ files instead."
TempCronFile="$(mktemp /tmp/cron.${CronUser}.XXXXXXX)"
UserCronDir="${HOME}/.cron/${CronUser}"
HostCronFile="${UserCronDir}/$(hostname -f)"
#}}}
# Should the user have to force updating ?#{{{
if [ ! -z "$(crontab ${CronOptions} -l 2> /dev/null)" ] && ! crontab ${CronOptions} -l | grep -q "${WARNING}"; then
    if isTrue "${Force}"; then
        crontab -l > "${HOME}/tmp/${CronUser}-oldcrontab"
        print_warning 0 "Old crontab is backed up to ${HOME}/tmp/${CronUser}-oldcrontab"
    else
        print_error 0 "Current crontab was not generated by loadcron; not changing."
        print_error 0 "Use loadcron -f to override"
        exit 1
    fi
fi
#}}}
# Constructing crontab contents.#{{{
print_info 0 "Constructing crontab contents."

echo "${WARNING}" >> "${TempCronFile}"
echo >> "${TempCronFile}"

if [ -f "${UserCronDir}/common" ]; then
    print_info 2 "Found common file, using it's contents."
    echo "# From ${UserCronDir}/common:" >> "${TempCronFile}"
    sed -e "s@\$\(HOME\|{HOME}\)@${UserHome}@g" \
        -e "s@^#.*@@g" \
        -e "/^[ \t]*$/d" \
        -e "s@^[ \t]*@@g" \
        < "${UserCronDir}/common" \
        >> "${TempCronFile}"
    echo >> "${TempCronFile}"
fi

if [ -f "${HostCronFile}" ]; then
    print_info 2 "Found host-specific file, using it's contents."
    echo "# From ${HostCronFile}:" >> "${TempCronFile}"
    sed -e "s@\$\(HOME\|{HOME}\)@${UserHome}@g" \
        -e "s@^#.*@@g" \
        -e "/^[ \t]*$/d" \
        -e "s@^[ \t]*@@g" \
        < "${HostCronFile}" \
        >> "${TempCronFile}"
    echo >> "${TempCronFile}"
fi
#}}}
# Using the constructing crontab content.#{{{
print_info 0 "Loading crontab for user ${CronUser}."
crontab ${CronOptions} - < "${TempCronFile}"
rm -f "${TempCronFile}"
#}}}
