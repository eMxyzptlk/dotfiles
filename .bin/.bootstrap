#!/usr/bin/env bash
#
#   vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

# have returns 0 if $1 is callable (alias, function or a binary)
# Credit: https://github.com/Daenyth/dotfiles/blob/a22723420e780f04a77ebab8dd2737cfaba43c42/.bashrc#L47
function have() {
  type "$1" &>/dev/null
}

# Arguments()#{{{
ARGS=( ${@} )
#}}}
# load the functions from ZSH#{{{
for func in ${HOME}/.zsh/functions/*.zsh; do
    # shellcheck disable=SC1090
    source "${func}"
done
#}}}

# Some functions are taken from
#     http://phraktured.net/config/
#     http://www.downgra.de/dotfiles/

# interrupt()#{{{
##
# The function interrupt will be used if the user pressed Ctrl+C
# You can easly do custom stuff by redefining this function
##
function interrupt()
{
  free_lock
  exit 130
}
#}}}
# die()#{{{
function die()
{
  local remove_lock=true
  if [ "${1}" = "-k" ]; then
    remove_lock=false
    shift
  fi
  print_error 0 "${@}"
  if isTrue "${remove_lock}"; then
    free_lock
  fi
  exit 1
}
#}}}
# lock_file()#{{{
function lock_file()
{
  [[ -z "${LOCK}" ]] && return 1
  if [ -f "${LOCK}" ]; then
    die -k "The lock file '${LOCK}' exists, please delete it if you wish to run the script."
  else
    touch "${LOCK}" || die "Couldn't create the lock file."
  fi
}
#}}}
# free_lock()#{{{
function free_lock()
{
  [[ -z "${LOCK}" ]] && return 1
  rm -f -- "${LOCK}"
}
#}}}
# help()#{{{
function help()
{
  print_info 0 "This script does not have a 'help' function."
  QuitScript
}
#}}}
# QuitScript()#{{{
function QuitScript()
{
  if [ -n "${1}" ] && isNumber "${1}"; then
    free_lock
    exit "${1}"
  fi

  # Exit code not given, ok let's try checking QuitScriptCode
  if [ -n "${QuitScriptCode}" ] && isNumber "${QuitScriptCode}"; then
    free_lock
    exit "${QuitScriptCode}"
  fi

  # Ok just quit
  free_lock
  exit 0
}
#}}}
# ConnectToX()#{{{
function ConnectToX()
{
    displaynum=`ls /tmp/.X11-unix/* | sed s#/tmp/.X11-unix/X##`
    export DISPLAY=":$displaynum"

    # from https://wiki.archlinux.org/index.php/Acpid#Laptop_Monitor_Power_Off
    export XAUTHORITY=$(ps -C Xorg -f --no-header | sed -n 's/.*-auth //; s/ -[^ ].*//; p')
}
#}}}
# saveFunction()#{{{
function saveFunction()
{
    local ORIG_FUNC=$(declare -f $1)
    local NEWNAME_FUNC="$2${ORIG_FUNC#$1}"
    eval "$NEWNAME_FUNC"
}
#}}}
# override debug(){{{
saveFunction debug func_debug
function debug()
{
    local funcstack=("" "" "SCRIPT")
    func_debug $@
}
#}}}
