#!/usr/bin/env zsh
#
#   vim:ft=sh:fenc=UTF-8:ts=4:sts=4:sw=4:expandtab:foldmethod=marker:foldlevel=0:
#
#   Copyright (c) 2010 Wael Nasreddine <wael.nasreddine@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307,
#   USA.
#

set -e

####
# Notes

# Don't use the following variables in your script, they are reserved
#   to the Functions uses
# 'LOCK': This is a variable used by the functions 'lock_script' and
#   'free_lock'
# 'TempFiles': This is a variable containing a list of Files to remove
#   when the script exits.
# Make sure you always use $ARGS instead of $1, Note that $ARGS[0]
#   correspond to $1, and $ARGS[1] correspong to $2 ...

#
####

# Bootstrap{{{
bootstrap="$(dirname "${0}")/.bootstrap"
if [ -f "${bootstrap}" ]; then
    # shellcheck source=/dev/null
    source "${bootstrap}"
else
    echo "Cannot bootstrap"
    exit 54
fi
unset bootstrap
#}}}

####
# Functions

# If you want to define a specific help for this script
function help()
{
    print_info "${log_depth}" "USAGE: tmx [-l|-d] <session_name|folder>"
    print_info "${log_depth}" "\t -h, --help                - this message"
    print_info "${log_depth}" "\t -s, --select-session      - fuzzy-select a session"
    print_info "${log_depth}" "\t -k, --kill-pane           - kill the pane after the session has been switched; only relevant with --select-session and within TMUX"
    print_info "${log_depth}" "\t -L, --socket-name         - use a different socket than the default"
    print_info "${log_depth}" "\t -c, --confirm-vim-start   - confirm before starting Vim, this is essentially a performance improvement"
}

function build_projects() {
    local dir=
    local i=
    local profile=
    local rc="${HOME}/.tmxrc"
    local rc_length=

    # compute the length of the rc file
    rc_length="$( jq length "${rc}" )"
    debug "rc_length=${rc_length}"
    for (( i = 0; i < rc_length; i++)); do
        # extract the profile for this project
        profile="$( jq -r ".[${i}] .profile" "${rc}" )"
        if [[ -z "${profile}" ]]; then
            print_error 0 "profile cannot be empty, this project will be ignored"
            print_error 1 "$(jq -r .[${i}] "${rc}" )"
            continue
        fi
        # extract the folder for this project
        dir="$( jq -r ".[${i}] .dir" "${rc}" )"
        if [[ -z "${dir}" ]]; then
            print_error 0 "dir cannot be empty, this project will be ignored"
            print_error 1 "$(jq -r .[${i}] "${rc}" )"
            continue
        fi
        # add this project to the hash
        projects+=( "${profile}:${dir}" )
    done
}

#
####

####
# Options

confirm_vim_startup=false
kill_pane=false
log_depth=0
select_session=false
tmux_socket_name=default

while [[ $# -ge 1 ]]; do
    case "${1}" in
        -h|--help)
            help
            exit 0
            ;;
        -k|--kill-pane)
            kill_pane=true
            shift
            ;;
        -s|--select-session)
            select_session=true
            shift
            ;;
        -L|--socket-name)
            tmux_socket_name="${2}"
            if [[ -z "${tmux_socket_name}" ]]; then
                print_error "${log_depth}" "--socket-name requires an argument"
                help
                exit 1
            fi
            shift 2
            ;;
        --log-depth)
            log_depth="${2}"
            if [[ -z "${log_depth}" ]]; then
                print_error "${log_depth}" "--log-depth requires an argument"
                help
                exit 1
            fi
            shift 2
            ;;
        -c|--confirm-vim-start)
            confirm_vim_startup=true
            shift
            ;;
        *)
            # Make sure we have only one argument left
            if [[ -n "${2}" ]]; then
                help
                exit 1
            fi
            sess="${1}"
            shift
            ;;
    esac
done

#
####

####
# Main

# start with an empty sess and an empty profile
selected_sess=
sess=
profile=
inside_tmux="$( test -n "${TMUX}" && echo true || echo false )"

# remove the TMUX from the environment to force creating of another session
unset TMUX

# declare the projects which is an associated array. We then use build_projects
# to build the array
typeset -a projects
build_projects

# are selecting the session?
if isTrue "${select_session}"; then
    # select the session
    selected_sess="$( for i in ${projects[@]}; do echo "${i}"; done | fzf )"
    if [[ -z "${selected_sess}" ]]; then
        print_error 0 "no session were selected"
        exit 1
    fi
    profile="$(echo "${selected_sess}" | cut -d: -f1)"
    sess="$(echo "${selected_sess}" | cut -d: -f2)"
    debug "sess=${sess}"
    debug "profile=${profile}"
fi

# if we have selected a profile, source it so we can execute the prepare
if [[ -n "${profile}" ]] && [[ -r "${HOME}/.zsh/profiles/${profile}.zsh" ]]; then
    source "${HOME}/.zsh/profiles/${profile}.zsh"
    pcode
fi

# expand any variable stored in the sess name
sess="$( eval "echo $sess" )"
debug "sess=${sess}"

# if the sess is an actual directory, go there first and set the sess to
# empty to generate the session name from the path
if [[ -d "${sess}" ]]; then
    # go inside the folder
    cd "${sess}"
    # set the session back to empty, it will be re-calculated in the next block
    sess=
fi

# if the session name was not given, generate one from the path
if [ "x${sess}" = "x" ]; then
    sess="${PWD##$GOPATH/src/}"
fi

# session name cannot contain a dot or a column
# https://github.com/tmux/tmux/blob/76688d204071b76fd3388e46e944e4b917c09625/session.c#L232
sess="$(echo "${sess}" | sed -e 's:\.:_:g' -e 's#:#_#g')"

# start a session if one does not exist for it yet
if ! tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" list-sessions -F '#{session_name}' | grep -q -e "^${sess}\$"; then
    # start the new tmux session
    tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" new-session -d -s "${sess}"

    # add the ACTIVE_PROFILE to the environment of the session
    tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" set-environment -t "${sess}" ACTIVE_PROFILE "${profile}"
    tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" set-environment -t "${sess}" SSH_AGENT_NAME "${profile}"

    # start a new shell on window 1
    tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" new-window -t "${sess}:1"

    # remove the first window as it will be replaced the main app for the session
    tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" kill-window -t "${sess}:0"

    if [[ "${sess}" = "mail" ]]; then
        TMUX= tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" new-session -d -s "${sess}" \; \
            new-window \; \
            kill-window -t :0 \; \
            new-window -t :0 'zsh -i -c emacs' \;
    elif [[ "${sess}" = "irc" ]]; then
        TMUX= tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" new-session -d -s "${sess}" \; \
            new-window \; \
            kill-window -t :0 \; \
            new-window -t :0 'zsh -i -c irssi' \;
    else

        # start vim
        if isTrue "${confirm_vim_startup}"; then
            tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" new-window -t "${sess}:0" 'zsh -i -c "echo \"Press Enter to start Vim \" && read && /usr/bin/vim"'
        else
            tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" new-window -t "${sess}:0" 'zsh -i -c /usr/bin/vim'
        fi
    fi
fi


# attach the session now
if isTrue "${inside_tmux}"; then
    # switch to the selected session
    tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" switch-client -t "${sess}"
    # kill the current pane if requested
    if isTrue "${kill_pane}"; then
        tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" kill-pane
    fi
else
    tmux -f "${TMUXDOTDIR:-$HOME}/.tmux.conf" -L "${tmux_socket_name}" attach -t "${sess}"
fi

#
####
