var_0: &global_env
  CACHIX_CACHE: yl

var_1: &install-nix
  run:
    name: Install Nix
    command: |
      curl https://nixos.org/nix/install | sh

var_2: &install-dependencies
  run:
    name: Install dependencies
    command: |
      if [[ -r "${HOME}/.nix-profile/etc/profile.d/nix.sh" ]]; then
        source "${HOME}/.nix-profile/etc/profile.d/nix.sh"
      fi

      # install git
      nix-env -f '<nixpkgs>' -iA gitAndTools.git

      # install cachix from nixpkgs at stable
      readonly nixpkgs_stable="external/nixpkgs-stable.nix"
      readonly nixpkgs="$( nix-build --no-out-link ${nixpkgs_stable} )"
      nix-env -I nixpkgs="${nixpkgs}" -f '<nixpkgs>' -iA cachix

var_3: &enable-cachix
  run:
    name: Enable cachix
    command: |
      if [[ -r "${HOME}/.nix-profile/etc/profile.d/nix.sh" ]]; then
        source "${HOME}/.nix-profile/etc/profile.d/nix.sh"
      fi

      cachix use "${CACHIX_CACHE}"

var_4: &instantiate-host
  run:
    name: Instantiate the host
    working_directory: ~/shabka
    command: |
      if [[ -r "${HOME}/.nix-profile/etc/profile.d/nix.sh" ]]; then
        source "${HOME}/.nix-profile/etc/profile.d/nix.sh"
      fi

      readonly shabka_path="$( pwd )"
      readonly nixpkgs_stable="${shabka_path}/external/nixpkgs-stable.nix"
      readonly nixpkgs_unstable="${shabka_path}/external/nixpkgs-unstable.nix"
      readonly host="${CIRCLE_JOB}"

      if [[ -r "${shabka_path}/hosts/${host}/release" ]]; then
        readonly release="$( cat "hosts/${host}/release" )"
      else
        # fallback to the default release
        readonly release="stable"
      fi

      if [[ "${release}" = "stable" ]]; then
          readonly nixpkgs="$( nix-build --no-out-link "${nixpkgs_stable}" )"
      else
          # TODO: improve the beild command
          readonly nixpkgs="$( nix-build --no-out-link "${nixpkgs_unstable}" --arg runCommand '(import <nixpkgs> {}).runCommand' --arg fetchpatch '(import <nixpkgs> {}).fetchpatch' )"
      fi

      export NIX_PATH="nixpkgs=${nixpkgs}:shabka-path=${shabka_path}"

      echo ">>> Instantiating the hostname '${host}' using nixpkgs at '${nixpkgs}'. NIX_PATH is set to '${NIX_PATH}'"
      nix-instantiate "${shabka_path}/hosts/${host}"

version: 2
jobs:
  athena:
    macos:
      xcode: "9.0"

    working_directory: ~/shabka

    environment:
      <<: *global_env

    steps:
      - checkout
      - *install-nix
      - *install-dependencies
      - *enable-cachix
      - *instantiate-host

  cratos:
    working_directory: ~/shabka

    environment:
      <<: *global_env

    docker:
      - image: nixos/nix

    steps:
      - checkout
      - *install-dependencies
      - *enable-cachix
      - *instantiate-host

  hades:
    working_directory: ~/shabka

    environment:
      <<: *global_env

    docker:
      - image: nixos/nix

    steps:
      - checkout
      - *install-dependencies
      - *enable-cachix
      - *instantiate-host

  hera:
    working_directory: ~/shabka

    environment:
      <<: *global_env

    docker:
      - image: nixos/nix

    steps:
      - checkout
      - *install-dependencies
      - *enable-cachix
      - *instantiate-host

  zeus:
    working_directory: ~/shabka

    environment:
      <<: *global_env

    docker:
      - image: nixos/nix

    steps:
      - checkout
      - *install-dependencies
      - *enable-cachix
      - *instantiate-host

workflows:
  version: 2
  testing:
    jobs:
      - athena:
          context: org-global
      - cratos:
          context: org-global
      - hades:
          context: org-global
      - hera:
          context: org-global
      - zeus:
          context: org-global
